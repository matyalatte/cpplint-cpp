#pragma once
#include <string>
#include <utility>

// C++ headers
inline const char* const CPP_HEADERS[] = {
    // Legacy
    "algobase.h",
    "algo.h",
    "alloc.h",
    "builtinbuf.h",
    "bvector.h",
    // "complex.h", collides with System C header "complex.h" since C11
    "defalloc.h",
    "deque.h",
    "editbuf.h",
    "fstream.h",
    "function.h",
    "hash_map",
    "hash_map.h",
    "hash_set",
    "hash_set.h",
    "hashtable.h",
    "heap.h",
    "indstream.h",
    "iomanip.h",
    "iostream.h",
    "istream.h",
    "iterator.h",
    "list.h",
    "map.h",
    "multimap.h",
    "multiset.h",
    "ostream.h",
    "pair.h",
    "parsestream.h",
    "pfstream.h",
    "procbuf.h",
    "pthread_alloc",
    "pthread_alloc.h",
    "rope",
    "rope.h",
    "ropeimpl.h",
    "set.h",
    "slist",
    "slist.h",
    "stack.h",
    "stdiostream.h",
    "stl_alloc.h",
    "stl_relops.h",
    "streambuf.h",
    "stream.h",
    "strfile.h",
    "strstream.h",
    "tempbuf.h",
    "tree.h",
    "type_traits.h",
    "vector.h",
    // C++ library headers
    "algorithm",
    "array",
    "atomic",
    "bitset",
    "chrono",
    "codecvt",
    "complex",
    "condition_variable",
    "deque",
    "exception",
    "forward_list",
    "fstream",
    "functional",
    "future",
    "initializer_list",
    "iomanip",
    "ios",
    "iosfwd",
    "iostream",
    "istream",
    "iterator",
    "limits",
    "list",
    "locale",
    "map",
    "memory",
    "mutex",
    "new",
    "numeric",
    "ostream",
    "queue",
    "random",
    "ratio",
    "regex",
    "scoped_allocator",
    "set",
    "sstream",
    "stack",
    "stdexcept",
    "streambuf",
    "string",
    "strstream",
    "system_error",
    "thread",
    "tuple",
    "typeindex",
    "typeinfo",
    "type_traits",
    "unordered_map",
    "unordered_set",
    "utility",
    "valarray",
    "vector",
    // C++14 headers
    "shared_mutex",
    // C++17 headers
    "any",
    "charconv",
    "codecvt",
    "execution",
    "filesystem",
    "memory_resource",
    "optional",
    "string_view",
    "variant",
    // C++20 headers
    "barrier",
    "bit",
    "compare",
    "concepts",
    "coroutine",
    "format",
    "latch",
    "numbers",
    "ranges",
    "semaphore",
    "source_location",
    "span",
    "stop_token",
    "syncstream",
    "version",
    // C++23 headers
    "expected",
    "flat_map",
    "flat_set",
    "generator",
    "mdspan",
    "print",
    "spanstream",
    "stacktrace",
    "stdfloat",
    // C++ headers for C library facilities
    "cassert",
    "ccomplex",
    "cctype",
    "cerrno",
    "cfenv",
    "cfloat",
    "cinttypes",
    "ciso646",
    "climits",
    "clocale",
    "cmath",
    "csetjmp",
    "csignal",
    "cstdalign",
    "cstdarg",
    "cstdbool",
    "cstddef",
    "cstdint",
    "cstdio",
    "cstdlib",
    "cstring",
    "ctgmath",
    "ctime",
    "cuchar",
    "cwchar",
    "cwctype",
    nullptr,
};

// C headers
inline const char* const C_HEADERS[] = {
    // System C headers
    "assert.h",
    "complex.h",
    "ctype.h",
    "errno.h",
    "fenv.h",
    "float.h",
    "inttypes.h",
    "iso646.h",
    "limits.h",
    "locale.h",
    "math.h",
    "setjmp.h",
    "signal.h",
    "stdalign.h",
    "stdarg.h",
    "stdatomic.h",
    "stdbool.h",
    "stddef.h",
    "stdint.h",
    "stdio.h",
    "stdlib.h",
    "stdnoreturn.h",
    "string.h",
    "tgmath.h",
    "threads.h",
    "time.h",
    "uchar.h",
    "wchar.h",
    "wctype.h",
    // C23 headers
    "stdbit.h",
    "stdckdint.h",
    // additional POSIX C headers
    "aio.h",
    "arpa/inet.h",
    "cpio.h",
    "dirent.h",
    "dlfcn.h",
    "fcntl.h",
    "fmtmsg.h",
    "fnmatch.h",
    "ftw.h",
    "glob.h",
    "grp.h",
    "iconv.h",
    "langinfo.h",
    "libgen.h",
    "monetary.h",
    "mqueue.h",
    "ndbm.h",
    "net/if.h",
    "netdb.h",
    "netinet/in.h",
    "netinet/tcp.h",
    "nl_types.h",
    "poll.h",
    "pthread.h",
    "pwd.h",
    "regex.h",
    "sched.h",
    "search.h",
    "semaphore.h",
    "setjmp.h",
    "signal.h",
    "spawn.h",
    "strings.h",
    "stropts.h",
    "syslog.h",
    "tar.h",
    "termios.h",
    "trace.h",
    "ulimit.h",
    "unistd.h",
    "utime.h",
    "utmpx.h",
    "wordexp.h",
    // additional GNUlib headers
    "a.out.h",
    "aliases.h",
    "alloca.h",
    "ar.h",
    "argp.h",
    "argz.h",
    "byteswap.h",
    "crypt.h",
    "endian.h",
    "envz.h",
    "err.h",
    "error.h",
    "execinfo.h",
    "fpu_control.h",
    "fstab.h",
    "fts.h",
    "getopt.h",
    "gshadow.h",
    "ieee754.h",
    "ifaddrs.h",
    "libintl.h",
    "mcheck.h",
    "mntent.h",
    "obstack.h",
    "paths.h",
    "printf.h",
    "pty.h",
    "resolv.h",
    "shadow.h",
    "sysexits.h",
    "ttyent.h",
    // Additional linux glibc headers
    "dlfcn.h",
    "elf.h",
    "features.h",
    "gconv.h",
    "gnu-versions.h",
    "lastlog.h",
    "libio.h",
    "link.h",
    "malloc.h",
    "memory.h",
    "netash/ash.h",
    "netatalk/at.h",
    "netax25/ax25.h",
    "neteconet/ec.h",
    "netipx/ipx.h",
    "netiucv/iucv.h",
    "netpacket/packet.h",
    "netrom/netrom.h",
    "netrose/rose.h",
    "nfs/nfs.h",
    "nl_types.h",
    "nss.h",
    "re_comp.h",
    "regexp.h",
    "sched.h",
    "sgtty.h",
    "stab.h",
    "stdc-predef.h",
    "stdio_ext.h",
    "syscall.h",
    "termio.h",
    "thread_db.h",
    "ucontext.h",
    "ustat.h",
    "utmp.h",
    "values.h",
    "wait.h",
    "xlocale.h",
    // Hardware specific headers
    "arm_neon.h",
    "emmintrin.h",
    "xmmintin.h",
    nullptr,
};

// Folders of C libraries so commonly used in C++,
// that they have parity with standard C libraries.
inline const char* const C_STANDARD_HEADER_FOLDERS[] = {
    // standard C library
    "sys",
    // glibc for linux
    "arpa",
    "asm-generic",
    "bits",
    "gnu",
    "net",
    "netinet",
    "protocols",
    "rpc",
    "rpcsvc",
    "scsi",
    // linux kernel header
    "drm",
    "linux",
    "misc",
    "mtd",
    "rdma",
    "sound",
    "video",
    "xen",
    nullptr,
};

inline std::string GetHeaderFoldersPattern() {
    std::string pattern = "(?:";
    const char* const *folder_p = C_STANDARD_HEADER_FOLDERS;
    while (*folder_p != nullptr) {
        pattern += *folder_p;
        pattern += "|";
        folder_p++;
    }
    pattern.pop_back();
    pattern += R"()\/.*\.h)";
    return pattern;
}
