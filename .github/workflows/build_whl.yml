name: Build wheel packages

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check-tag.outputs.tag }}
    steps:
      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            TAG=$(echo ${{ github.ref }} | sed -e "s#refs/tags/##g")
          else
            TAG=$(echo ${{ github.sha }} | cut -c1-7)
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        shell: bash

      - uses: actions/checkout@v4

      - name: Create Release Draft
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.check-tag.outputs.tag }}
          name: ${{ steps.check-tag.outputs.tag }}
          body: |
            ## Changelog

            - First Change
            - Second Change

            ## Installation

            ```sh
            pip install cpplint-cpp --no-index --find-links https://matyalatte.github.io/cpplint-cpp/packages.html
            ```
          draft: true
          prerelease: false

  build-windows:
    name: build-windows_${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    runs-on: windows-2022
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Meson
        run: pip install meson

      - name: Prepare MSVC
        uses: bus1/cabuild/action/msdevshell@v1
        with:
          architecture: x64

      - name: Build c++ binary for amd64
        if: matrix.arch == 'amd64'
        run: |
          meson setup build --native-file=presets/release.ini
          meson compile -C build
          meson test -C build -v

      - name: Build c++ binary for arm64
        if: matrix.arch == 'arm64'
        run: |
          meson setup build --cross-file=presets/release.ini --cross-file=presets/windows_arm64.ini
          meson compile -C build
          meson test -C build -v

      - name: Copy built binary
        run: |
          mkdir dist
          cp build/cpplint-cpp.exe dist
          cp build/version.h dist
        shell: bash

      - name: Build wheel package
        run: |
          pip install build
          python -m build

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.setup.outputs.tag }} dist/*.whl
        shell: bash

  build-unix:
    name: build-${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Meson for Unix
        run: pip3 install meson ninja

      - name: Build c++ binary
        run: |
          meson setup build --native-file=presets/release.ini
          meson compile -C build
          meson test -C build -v

      - name: Check required GLIBC version
        if: runner.os == 'Linux'
        run: bash .github/workflows/check_glibc_compatibility.sh ./build/cpplint-cpp

      - name: Strip symbols
        if: matrix.os == 'Linux'
        run: strip --strip-all ./build/cpplint-cpp

      - name: Strip symbols
        if: matrix.os != 'Linux'
        run: strip ./build/cpplint-cpp

      - name: Copy built binary
        run: |
          mkdir dist
          cp build/cpplint-cpp dist
          cp build/version.h dist

      - name: Build wheel package
        run: |
          pip install build
          python -m build

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.setup.outputs.tag }} dist/*.whl
        shell: bash

  build-linux_arm64:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Build linux package for arm64
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          docker buildx build --platform linux/arm64 -t cpplint_arm ./
          docker run --name cpplint_arm cpplint_arm
          docker cp cpplint_arm:/cpplint-cpp/dist ./

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.setup.outputs.tag }} dist/*.whl
        shell: bash

  build-linux_x86_64:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Build linux package for x86_64
        run: |
          docker build -t cpplint ./
          docker run --name cpplint cpplint
          docker cp cpplint:/cpplint-cpp/dist ./

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.setup.outputs.tag }} dist/*.whl
        shell: bash
